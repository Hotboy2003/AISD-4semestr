"""
Алгоритм Грэхэма заключается в следующем:

1. Находим точку P с наименьшим y-координатом (в случае равенства выбирается точка с наименьшим x-координатом).

2. Сортируем все точки по углу, который они образуют с осью x, начиная от точки P (для этого можно использовать сортировку вставками).

3. Проходим по отсортированным точкам и добавляем их в стек. Если текущая точка создает левый поворот (то есть поворачивается влево относительно 
двух последних точек в стеке), то мы ее добавляем в стек. Если же текущая точка создает правый поворот, то мы удаляем последнюю точку из стека 
и проверяем текущую точку на создание нового правого поворота.

4. Когда мы прошли все точки, в стеке останутся только точки, образующие выпуклую оболочку.

5. Если в стеке осталась только одна точка, то множество точек не образует выпуклой оболочки. Если же осталось больше одной точки, 
то множество точек образует выпуклую оболочку.

"""
from math import atan2

def convex_hull(points):
    """
    Функция вычисления выпуклой оболочки множества точек с помощью алгоритма Грэхэма.
    :param points: список кортежей (x, y) с координатами точек
    :return: список кортежей (x, y) с координатами точек выпуклой оболочки
    """
    # функция для вычисления угла между двумя точками
    def angle(p1, p2):
        return atan2(p2[1]-p1[1], p2[0]-p1[0])

    # находим точку с наименьшими координатами (x, y)
    p = min(points, key=lambda x: (x[1], x[0]))

    # сортируем точки по возрастанию угла между ними и начальной точкой P
    sorted_points = sorted(points, key=lambda x: (angle(p, x), x[0]**2 + x[1]**2))

    # инициализируем стек
    stack = [sorted_points[0], sorted_points[1]]

    for point in sorted_points[2:]:
        while len(stack) >= 2 and det(stack[-2], stack[-1], point) <= 0:
            stack.pop()
        stack.append(point)

    return stack

#Функция det вычисляет определитель матрицы 3x3:

def det(p1, p2, p3):
    """
    Функция вычисления определителя матрицы 3x3, заданной тремя точками.
    :param p1: кортеж (x, y) с координатами первой точки
    :param p2: кортеж (x, y) с координатами второй точки
    :param p3: кортеж (x, y) с координатами третьей точки
    :return: определитель матрицы 3x3
    """
    x1, y1 = p1
    x2, y2 = p2
    x3, y3 = p3
    return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)

"""
points = [(0, 3), (1, 1), (2, 2), (4, 4), (0, 0), (1, 2), (3, 1), (3, 3)]
"""
points = [(0, 0), (4, 4), (7, 7), (0, 5), (5, 0)]
convex_points = convex_hull(points)
print(convex_points)